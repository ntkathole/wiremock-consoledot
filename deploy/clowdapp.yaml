---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: wiremock
parameters:
  - name: ENV_NAME
    value: env-wiremock
  - name: WIREMOCK_IMAGE
    value: quay.io/cloudservices/wiremock
  - name: WIREMOCK_IMAGE_TAG
    value: 3x-alpine
  - name: MEMORY_REQUEST
    value: 256Mi
  - name: MEMORY_LIMIT
    value: 512Mi
  - name: CPU_REQUEST
    value: 150m
  - name: CPU_LIMIT
    value: 300m
  - name: SUBSCRIPTION_SEARCH_URL
    value: placeholder
  - name: PARTNER_ENTITLEMENT_URL
    value: placeholder
  - name: SWATCH_CONTRACT_SERVICE_URL
    value: placeholder
  - name: RHSM_CONSUMERS_URL
    value: placeholder
objects:
  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdApp
    metadata:
      name: wiremock
      labels:
        app: wiremock
    spec:
      envName: ${ENV_NAME}

      deployments:
        - name: service
          replicas: 1
          webServices:
            public:
              enabled: true
          podSpec:
            image: ${WIREMOCK_IMAGE}:${WIREMOCK_IMAGE_TAG}
            resources:
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
            env:
              - name: KEYSTORE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: tls
                    key: keystore_password
              - name: WIREMOCK_OPTIONS
                # Wiremock uses the truststore instead of keystore to read client certs: https://wiremock.org/docs/proxying/#proxying-to-a-target-server-that-requires-client-certificate-authentication
                value: --port=8000 --https-truststore=/pinhead/keystore.jks --truststore-type=JKS --truststore-password=$(KEYSTORE_PASSWORD)
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /__admin/health
                port: 8000
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 5
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /__admin/health
                port: 8000
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 5
            volumeMounts:
            - name: swatch-proxy-mappings
              mountPath: /home/wiremock/mappings
            - name: pinhead
              mountPath: /pinhead
            volumes:
            - name: swatch-proxy-mappings
              configMap:
                name: proxy-mappings
                emptyDir:
            - name: pinhead
              secret:
                secretName: pinhead

  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: proxy-mappings
    data:
      subscription-search-api-proxy.json: |-
        {
          "priority": 10,
          "request": {
            "method": "ANY",
            "urlPattern": "/mock/subscriptionApi/search/criteria;.*"
          },
          "response": {
            "proxyBaseUrl": "${SUBSCRIPTION_SEARCH_URL}",
            "proxyUrlPrefixToRemove": "/mock/subscriptionApi"
          }
        }
      partner-entitlement-api-proxy.json: |-
        {
          "priority": 10,
          "request": {
            "method": "ANY",
            "urlPattern": "/mock/partnerApi/v1/partnerSubscriptions"
          },
          "response": {
            "proxyBaseUrl": "${PARTNER_ENTITLEMENT_URL}",
            "proxyUrlPrefixToRemove": "/mock/partnerApi"
          }
        }
      contract_service_response.json: |-
        {
          "priority": 10,
          "request": {
            "method": "ANY",
            "urlPattern": "/mock/contractApi/api/swatch-contracts/internal/contracts.*"
          },
          "response": {
            "proxyBaseUrl": "${SWATCH_CONTRACT_SERVICE_URL}",
            "proxyUrlPrefixToRemove": "/mock/contractApi"
          }
        }
      conduit_service_response.json: |-
        {
          "priority": 10,
          "request": {
            "method": "ANY",
            "urlPattern": "/mock/rhsmApi/candlepin/consumers/feeds.*"
          },
          "response": {
            "proxyBaseUrl": "${RHSM_CONSUMERS_URL}",
            "proxyUrlPrefixToRemove": "/mock/rhsmApi"
          }
        }

